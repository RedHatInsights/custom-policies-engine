# Configuration file
# key = value

# Logging properties
quarkus.log.category."com.redhat.cloud.policies.engine".level=${EXTERNAL_LOGGING_LEVEL:INFO}
quarkus.log.category."org.hawkular.alerts.engine".level=${EXTERNAL_LOGGING_LEVEL:INFO}

# Sentry logging. Off by default, enabled on OpenShift
# See https://quarkus.io/guides/logging-sentry#in-app-packages
quarkus.log.sentry=false
quarkus.log.sentry.in-app-packages=*
quarkus.log.sentry.dsn=FILL_ME
# WARN is the sentry default. It is listed here for documentation purposes.
# quarkus.log.sentry.level=WARN

# Http port
quarkus.http.port=8084

# For dev only
#external.org.hawkular.alerts.ui.path=/home/michael/projects/hawkular-alerts-ui

# Kafka bootstrap applies to all topics
kafka.bootstrap.servers=localhost:9092

# Source <= hosts
mp.messaging.incoming.events.connector=smallrye-kafka
mp.messaging.incoming.events.topic=platform.inventory.events
mp.messaging.incoming.events.group.id=correlation
mp.messaging.incoming.events.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.events.failure-strategy=fail
# Source <= hosts

mp.messaging.outgoing.email.connector=smallrye-kafka
mp.messaging.outgoing.email.topic=platform.policies.actions-email
mp.messaging.outgoing.email.group.id=correlation
mp.messaging.outgoing.email.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.email.value.serializer=io.vertx.kafka.client.serialization.JsonObjectSerializer
mp.messaging.outgoing.email.max-inflight-messages=20

mp.messaging.outgoing.webhook.connector=smallrye-kafka
mp.messaging.outgoing.webhook.topic=platform.notifications.ingress
mp.messaging.outgoing.webhook.group.id=correlation
mp.messaging.outgoing.webhook.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.webhook.value.serializer=io.vertx.kafka.client.serialization.StringSerializer
mp.messaging.outgoing.webhook.max-inflight-messages=20

# == Inbound properties
engine.receiver.store-events=false

# == Infinispan properties
engine.backend.ispn.reindex=false

# How many hours do we retain the stored events. Set to negative value to store forever
engine.backend.ispn.events-lifespan=1

# How many hours do we retain the alerts. Set to negative value to store forever
engine.backend.ispn.alerts-lifespan=168

# Used to clean triggers and data cache, defined in milliseconds
engine.backend.ispn.partition-lifespan=100

# Store only thin part of the alerts
engine.backend.ispn.alerts-thin=false

# == Drools properties
engine.rules.events.duplicate-filter-time=0

# Milliseconds
engine.rules.data.duplicate-filter-time=1000

# == Cache manager properties
engine.cache.disable-publish-filtering=false
engine.cache.reset-publish-cache=true
engine.backend.ispn.actions-ephemeral=true

# == Alerts Engine properties

# Milliseconds
engine.alerts.engine-delay=1000

# Milliseconds
engine.alerts.engine-period=2000

# Defines if engine extensions are enabled and data is sent to them for processing
engine.alerts.engine-extensions=false

engine.data-driven-triggers-enabled=false

# If the last evaluated time should be updated to Infinispan
engine.alerts.condition-evaluation-time=true

# Config for old notifications-backend
external.notifications-backend.register.url=http://hooks-backend:8080/api/hooks/apps/register


quarkus.jaeger.service-name=policies-engine
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
# The next one is to send trace data directly to the collector.
# Should not be used when then agent is present on a node.
# Depending on the location, the default port is 14268
#quarkus.jaeger.endpoint=http://jaeger-c.apps-crc.testing/api/traces

